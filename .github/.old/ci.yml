
name: Tests on PRs

on:

  pull_request:
    branches: 
    - main

jobs:
  test:
    if: ${{ github.event_name == 'pull_request'}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    env:
      FAIL_UNDER: 60
    steps:
      - name: Event Name
        run: echo ${{github.event_name }}
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system packages
        run: |
          # required for sqlite3 json extension
          sudo apt-get install -y musl-dev
          sudo ln -s /lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1
          # install redis server and make sure it is stopped
          sudo apt-get install -y redis-server
          sudo service redis-server stop

      - name: Install python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements-dev.txt
          pip install flake8 pytest coverage coverage-badge pytest-cov

      - name: Lint with flake8
        id: linter
        run: |
          # stop the build if there are Python syntax errors or undefined names
          #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 > lint.txt
        continue-on-error: true

      - name: Get linting errors count
        run: cat lint.txt | tail -n1 > lint-count.txt

      - name: Test with pytest
        id: tests
        run: | 
          pytest
        continue-on-error: true

      - name: Coverage
        id: coverage
        run:  | 
          coverage run --source=app -m pytest || true
          coverage report --skip-covered --fail-under=$FAIL_UNDER > coverage.txt
        continue-on-error: true

      - name: Generage Coverage JSON
        id: coverage_json
        run:  | 
          coverage json

      - name: Find Current Pull Request
        uses: jwalton/gh-find-current-pr@v1.2.1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open

        #This will echo "Your PR is 7", or be skipped if there is no current PR.
      - run: echo "Your PR is ${PR}"
        if: success() && steps.findPr.outputs.number
        env:
          PR: ${{ steps.findPr.outputs.pr }}

      - uses: actions/github-script@v3
        if: success() && steps.findPr.outputs.number
        env: 
          PR: ${{ steps.findPr.outputs.pr }}
          BRANCH: ${{ github.head_ref }}
          LINTER_STATUS: ${{ steps.linter.outcome }} 
          TESTS_STATUS: ${{ steps.tests.outcome }}
          COVERAGE_STATUS: ${{ steps.coverage.outcome }}
          FAIL_UNDER: ${{ env.FAIL_UNDER }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |

            const {
              PR, BRANCH, 
              LINTER_STATUS,
              TESTS_STATUS,
              COVERAGE_STATUS,
              FAIL_UNDER
            } = process.env;
            const fs = require('fs')
            const data = fs.readFileSync('coverage.txt', 'utf8')
            const lint = fs.readFileSync('lint.txt', 'utf8')
            const lint_count = fs.readFileSync('lint-count.txt', 'utf8')
            const pytest = fs.readFileSync('coverage-pytest.txt', 'utf8')
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'))

            function getIconByStatus(status) {
              return getIconByCondition(status == 'success')
            }

            function getIconByCondition(cond) {
              return cond ? ":heavy_check_mark:" : ":x:"
            }

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
            # CI Report: 
            ![example workflow](https://github.com/JonathanLoscalzo/github-actions-prueba/actions/workflows/ci.yml/badge.svg?branch=${BRANCH})

            LINTER_STATUS: ${LINTER_STATUS} ${getIconByStatus(LINTER_STATUS)} 
            TESTS_STATUS: ${TESTS_STATUS} ${getIconByStatus(TESTS_STATUS)}
            COVERAGE_STATUS: ${COVERAGE_STATUS} ${getIconByStatus(COVERAGE_STATUS)}

            ## Linter
            Linter Errors Counts: ${lint_count} ${getIconByCondition(lint_count==0)}

            <details>
            <summary> Summary </summary>
            
            \`\`\`
            ${lint}
            \`\`\`

            </details>


            ## Coverage
            ### Summary
            Covered Lines: ${coverage.totals.covered_lines}/${coverage.totals.num_statements} :eyes:
            Percentage Covered: ${coverage.totals.percent_covered} % ${getIconByCondition(coverage.totals.percent_covered >= FAIL_UNDER)} 
            ### Coverage lib
            
            <details>
            <summary> Summary </summary>
            
            \`\`\`
            ${data}
            \`\`\`

            </details>


            ### Pytest-cov
            
            <details>
              <summary> Summary </summary>
            
            \`\`\`
            ${pytest}
            \`\`\`

            </details>`


            })
      
      # - name: Check coverage failures
      #   if: ${{ steps.coverage.outcome != 'success' }}
      #   run: exit 1
      # - name: Check tests failures
      #   if: ${{ steps.tests.outcome != 'success' }}
      #   run: exit 1  
  monitor:
    runs-on: ubuntu-latest 
    needs: test
    steps:
    - name: Log
      run: echo "ALGO"