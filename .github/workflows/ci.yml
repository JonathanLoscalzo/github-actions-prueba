
name: Tests

on:
  # push:
  #   branches: 
  #     - 'features/**'

  pull_request:
    branches: 
    - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest coverage coverage-badge pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 > lint.txt
          cat lint.txt | tail -n1 > lint-count.txt
      - name: Test with pytest
        id: tests
        run: | 
          pytest
          pytest --cov-report term-missing --cov=app tests/ > coverage-pytest.txt
        continue-on-error: true

      - name: Coverage
        run:  | 
          coverage run --source=app -m pytest
          # --fail-under=80 
          coverage report --skip-covered > coverage.txt
          coverage-badge > coverage.svg
          coverage json

          

      # - name: Archive code coverage results
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: code-coverage-report
      #     path: htmlcov

      # - name: Archive code coverage results 2 
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: coverage-badge
      #     path: coverage.svg

      - name: Find Current Pull Request
        uses: jwalton/gh-find-current-pr@v1.2.1
        id: findPr
        with:
          # Can be "open", "closed", or "all".  Defaults to "open".
          state: open

        #This will echo "Your PR is 7", or be skipped if there is no current PR.
      - run: echo "Your PR is ${PR}"
        if: success() && steps.findPr.outputs.number
        env:
          PR: ${{ steps.findPr.outputs.pr }}

      - uses: actions/github-script@v3
        if: success() && steps.findPr.outputs.number
        env: 
          PR: ${{ steps.findPr.outputs.pr }}
          BRANCH: ${{ github.head_ref }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |

            const {PR, BRANCH} = process.env;
            const fs = require('fs')
            const data = fs.readFileSync('coverage.txt', 'utf8')
            const lint = fs.readFileSync('lint.txt', 'utf8')
            const lint_count = fs.readFileSync('lint-count.txt', 'utf8')
            const pytest = fs.readFileSync('coverage-pytest.txt', 'utf8')
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'))

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
            # CI Report: 
            ![example workflow](https://github.com/JonathanLoscalzo/github-actions-prueba/actions/workflows/ci.yml/badge.svg?branch=${BRANCH})

            ## Linter
            Linter errors: ${lint_count}
            <details>
            <summary> Summary </summary>
            
            \`\`\`
            ${lint}
            \`\`\`

            </details>


            ## Coverage
            ### Summary
            Covered Lines: ${coverage.totals.covered_lines}/${coverage.totals.num_statements} :eyes:
            Percentage Covered: ${coverage.totals.percent_covered} % :exclamation: 
            ### Coverage lib
            
            <details>
            <summary> Summary </summary>
            
            \`\`\`
            ${data}
            \`\`\`

            </details>


            ### Pytest-cov
            
            <details>
              <summary> Summary </summary>
            
            \`\`\`
            ${pytest}
            \`\`\`

            </details>`


            })
      - name: Check on tests failures
        if: job.steps.tests.status == failure()
        run: exit 1  
        
